{
  "_args": [
    [
      {
        "raw": "/private/var/folders/d4/pkk546b50l5484lg4pl3qt_80000gn/T/d-11734-701-15uafx5/package.tgz",
        "scope": null,
        "escapedName": null,
        "name": null,
        "rawSpec": "/private/var/folders/d4/pkk546b50l5484lg4pl3qt_80000gn/T/d-11734-701-15uafx5/package.tgz",
        "spec": "/private/var/folders/d4/pkk546b50l5484lg4pl3qt_80000gn/T/d-11734-701-15uafx5/package.tgz",
        "type": "local"
      },
      "/private/var/folders/d4/pkk546b50l5484lg4pl3qt_80000gn/T/apm-install-dir-11734-701-1cau6um"
    ]
  ],
  "_from": "../d-11734-701-15uafx5/package.tgz",
  "_id": "linter-clang@4.1.1",
  "_inCache": true,
  "_installable": true,
  "_location": "/linter-clang",
  "_phantomChildren": {},
  "_requested": {
    "raw": "/private/var/folders/d4/pkk546b50l5484lg4pl3qt_80000gn/T/d-11734-701-15uafx5/package.tgz",
    "scope": null,
    "escapedName": null,
    "name": null,
    "rawSpec": "/private/var/folders/d4/pkk546b50l5484lg4pl3qt_80000gn/T/d-11734-701-15uafx5/package.tgz",
    "spec": "/private/var/folders/d4/pkk546b50l5484lg4pl3qt_80000gn/T/d-11734-701-15uafx5/package.tgz",
    "type": "local"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "file:../d-11734-701-15uafx5/package.tgz",
  "_shasum": "8a2ed73bc8bec8e174797463af72c75f32ccb450",
  "_shrinkwrap": null,
  "_spec": "/private/var/folders/d4/pkk546b50l5484lg4pl3qt_80000gn/T/d-11734-701-15uafx5/package.tgz",
  "_where": "/private/var/folders/d4/pkk546b50l5484lg4pl3qt_80000gn/T/apm-install-dir-11734-701-1cau6um",
  "bugs": {
    "url": "https://github.com/AtomLinter/linter-clang/issues"
  },
  "configSchema": {
    "executablePath": {
      "type": "string",
      "default": "clang"
    },
    "clangIncludePaths": {
      "type": "array",
      "default": [
        "."
      ]
    },
    "clangSuppressWarnings": {
      "type": "boolean",
      "default": false
    },
    "clangDefaultCFlags": {
      "type": "string",
      "default": "-Wall"
    },
    "clangDefaultCppFlags": {
      "type": "string",
      "default": "-Wall -std=c++11"
    },
    "clangDefaultObjCFlags": {
      "type": "string",
      "default": ""
    },
    "clangDefaultObjCppFlags": {
      "type": "string",
      "default": ""
    },
    "clangErrorLimit": {
      "type": "integer",
      "default": 0
    }
  },
  "dependencies": {
    "atom-linter": "^9.0.0",
    "atom-package-deps": "^4.5.0",
    "clang-flags": "^0.2.2"
  },
  "description": "Lint C-based files using clang",
  "devDependencies": {
    "eslint": "^3.18.0",
    "eslint-config-airbnb-base": "^11.1.2",
    "eslint-plugin-import": "^2.2.0",
    "jasmine-fix": "^1.0.1"
  },
  "engines": {
    "atom": ">=1.4.0 <2.0.0"
  },
  "eslintConfig": {
    "extends": "airbnb-base",
    "rules": {
      "global-require": "off",
      "import/no-unresolved": [
        "error",
        {
          "ignore": [
            "atom"
          ]
        }
      ]
    },
    "globals": {
      "atom": true
    },
    "env": {
      "browser": true,
      "node": true
    }
  },
  "homepage": "https://github.com/AtomLinter/linter-clang#readme",
  "license": "MIT",
  "main": "./lib/main",
  "name": "linter-clang",
  "optionalDependencies": {},
  "package-deps": [
    "linter:2.0.0"
  ],
  "providedServices": {
    "linter": {
      "versions": {
        "2.0.0": "provideLinter"
      }
    }
  },
  "readme": "# linter-clang\n\n[![Travis.ci Shield](https://img.shields.io/travis/AtomLinter/linter-clang/master.svg?style=flat-square&label=linux)](https://travis-ci.org/AtomLinter/linter-clang)\n[![Travis.ci Shield](https://img.shields.io/travis/AtomLinter/linter-clang/master.svg?style=flat-square&label=os%20x)](https://travis-ci.org/AtomLinter/linter-clang)\n[![AppVeyor Sheild](https://img.shields.io/appveyor/ci/AtomLinter/linter-clang/master.svg?style=flat-square&label=windows)](https://ci.appveyor.com/project/kepler0/linter-clang)\n\nThis linter plugin for [Linter](https://github.com/AtomLinter/Linter) provides an interface to clang. It will be used with files that have the \"C++\", \"C\", \"Objective-C\" and \"Objective-C++\" syntax.\n\n### Plugin installation\nInstall from the Settings pane of Atom by searching for and installing the `linter-clang` package.\n\nOr install from your Command Prompt by running:\n```\n$ apm install linter-clang\n```\n\nThis package will ensure that all dependencies are installed on activation.\n\n## Project-specific settings\n\n### .clang_complete\nIf your project has some extra include directories, put them in a file called \".clang_complete\" and list them line by line.\nThe linter will open the file and use the specified paths when linting in your project.\n\n```\n-Iinclude\n-Ilib/foo/include\n```\nPlease note the file should contain one command line argument per line.\nThese arguments are passed to clang directly using exec and not via a shell.\nTherefore any spaces are treated as a part of the command line argument.\n\nThis means on the one hand `-I include` results in clang using ` include` (note the space at the beginning) as include directory.\nFor the same reason `-I include -I lib/foo/include` causes clang to search for includes in ` include -I lib/foo/include`.\n\nOn the other hand if your path contains spaces you must not escape them or put quotes around the path.\nFor example: `-Ilib/dir with spaces/include` only works without any quotes or escaping.\n\n### Clang JSON Compilation Database\nThe [Clang JSON Compilation Database](http://clang.llvm.org/docs/JSONCompilationDatabase.html) is also a supported format for project specific settings.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/AtomLinter/linter-clang.git"
  },
  "scripts": {
    "lint": "eslint .",
    "test": "apm test"
  },
  "version": "4.1.1"
}
