function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { var callNext = step.bind(null, 'next'); var callThrow = step.bind(null, 'throw'); function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(callNext, callThrow); } } callNext(); }); }; }

// eslint-disable-next-line import/no-extraneous-dependencies

var _jasmineFix = require('jasmine-fix');

// Note, when testing if using fit you must import it!

var _path = require('path');

'use babel';

var lint = require('../lib/main').provideLinter().lint;

var miPath = (0, _path.join)(__dirname, 'files', 'missing_import');
var poPath = (0, _path.join)(__dirname, 'files', 'pragma', 'pragma_once');
var validPath = (0, _path.join)(__dirname, 'files', 'valid.c');
var multiRangePath = (0, _path.join)(__dirname, 'files', 'multi-range.cpp');
var fixitPath = (0, _path.join)(__dirname, 'files', 'fixit.hpp');
var otherPath = (0, _path.join)(__dirname, 'files', 'otherFile');
var otherAPath = (0, _path.join)(otherPath, 'a.cpp');
var otherBPath = (0, _path.join)(otherPath, 'b.hpp');
var fileText = '// This is a comment, this will not return any errors.\n#include "nothing.h"\n\nint main(int argc, char const *argv[]) {\n  /* code */\n  return 0;\n}\n';

describe('The Clang provider for AtomLinter', function () {
  (0, _jasmineFix.beforeEach)(_asyncToGenerator(function* () {
    yield atom.packages.activatePackage('language-c');
    yield atom.packages.activatePackage('linter-clang');
  }));

  (0, _jasmineFix.it)('finds nothing wrong with a valid file', _asyncToGenerator(function* () {
    var editor = yield atom.workspace.open(validPath);
    var messages = yield lint(editor);
    expect(messages.length).toBe(0);
  }));

  describe('handles errors in different file types', function () {
    (0, _jasmineFix.it)('finds a fatal error in "missing_import.c"', _asyncToGenerator(function* () {
      var editor = yield atom.workspace.open(miPath + '.c');
      var messages = yield lint(editor);
      expect(messages.length).toBe(1);
      expect(messages[0].severity).toBe('error');
      expect(messages[0].excerpt).toBe("'nothing.h' file not found");
      expect(messages[0].location.file).toBe(miPath + '.c');
      expect(messages[0].location.position).toEqual([[1, 9], [1, 20]]);
    }));

    (0, _jasmineFix.it)('finds a fatal error in "missing_import.cpp"', _asyncToGenerator(function* () {
      var editor = yield atom.workspace.open(miPath + '.cpp');
      var messages = yield lint(editor);
      expect(messages.length).toBe(1);
      expect(messages[0].severity).toBe('error');
      expect(messages[0].excerpt).toBe("'nothing.h' file not found");
      expect(messages[0].location.file).toBe(miPath + '.cpp');
      expect(messages[0].location.position).toEqual([[1, 9], [1, 20]]);
    }));

    (0, _jasmineFix.it)('finds a fatal error in "missing_import.m"', _asyncToGenerator(function* () {
      var editor = yield atom.workspace.open(miPath + '.m');
      var messages = yield lint(editor);
      expect(messages.length).toBe(1);
      expect(messages[0].severity).toBe('error');
      expect(messages[0].excerpt).toBe("'nothing.h' file not found");
      expect(messages[0].location.file).toBe(miPath + '.m');
      expect(messages[0].location.position).toEqual([[1, 9], [1, 20]]);
    }));

    (0, _jasmineFix.it)('finds a fatal error in "missing_import.mm"', _asyncToGenerator(function* () {
      var editor = yield atom.workspace.open(miPath + '.mm');
      var messages = yield lint(editor);
      expect(messages.length).toBe(1);
      expect(messages[0].severity).toBe('error');
      expect(messages[0].excerpt).toBe("'nothing.h' file not found");
      expect(messages[0].location.file).toBe(miPath + '.mm');
      expect(messages[0].location.position).toEqual([[1, 9], [1, 20]]);
    }));
  });

  describe('handles pragma once properly', function () {
    (0, _jasmineFix.it)('finds a pragma once warning in pragma_once.c', _asyncToGenerator(function* () {
      var editor = yield atom.workspace.open(poPath + '.c');
      var messages = yield lint(editor);
      expect(messages.length).toEqual(1);
      expect(messages[0].severity).toEqual('warning');
      expect(messages[0].excerpt).toEqual('#pragma once in main file [-Wpragma-once-outside-header]');
      expect(messages[0].location.file).toBe(poPath + '.c');
      expect(messages[0].location.position).toEqual([[0, 8], [0, 12]]);
    }));

    (0, _jasmineFix.it)('finds a pragma once warning in pragma_once.cpp', _asyncToGenerator(function* () {
      var editor = yield atom.workspace.open(poPath + '.cpp');
      var messages = yield lint(editor);
      expect(messages.length).toEqual(1);
      expect(messages[0].severity).toEqual('warning');
      expect(messages[0].excerpt).toEqual('#pragma once in main file [-Wpragma-once-outside-header]');
      expect(messages[0].location.file).toBe(poPath + '.cpp');
      expect(messages[0].location.position).toEqual([[0, 8], [0, 12]]);
    }));

    (0, _jasmineFix.it)("doesn't find a pragma once warning in pragma_once.h", _asyncToGenerator(function* () {
      var editor = yield atom.workspace.open(poPath + '.h');
      var messages = yield lint(editor);
      expect(messages.length).toEqual(0);
    }));

    (0, _jasmineFix.it)("doesn't find a pragma once warning in pragma_once.hpp", _asyncToGenerator(function* () {
      var editor = yield atom.workspace.open(poPath + '.hpp');
      var messages = yield lint(editor);
      expect(messages.length).toEqual(0);
    }));
  });

  (0, _jasmineFix.it)('works on a modified file', _asyncToGenerator(function* () {
    // Open the valid file
    var editor = yield atom.workspace.open(validPath);
    // Set the text to invalid text
    editor.setText(fileText);
    // Lint the editor
    var messages = yield lint(editor);
    expect(messages.length).toBe(1);
    expect(messages[0].severity).toBe('error');
    expect(messages[0].excerpt).toBe("'nothing.h' file not found");
    expect(messages[0].location.file).toBe(validPath);
    expect(messages[0].location.position).toEqual([[1, 9], [1, 20]]);
  }));

  (0, _jasmineFix.it)('handles multiple ranges', _asyncToGenerator(function* () {
    var editor = yield atom.workspace.open(multiRangePath);
    var messages = yield lint(editor);
    expect(messages.length).toBe(1);
    expect(messages[0].severity).toBe('error');
    expect(messages[0].excerpt).toBe("invalid operands to binary expression ('double' and 'double')");
    expect(messages[0].location.file).toBe(multiRangePath);
    expect(messages[0].location.position).toEqual([[3, 15], [3, 24]]);
  }));

  (0, _jasmineFix.it)('handles suggested fixes', _asyncToGenerator(function* () {
    var editor = yield atom.workspace.open(fixitPath);
    var messages = yield lint(editor);
    expect(messages.length).toBe(1);
    expect(messages[0].severity).toBe('warning');
    expect(messages[0].excerpt).toBe('extra tokens at end of #endif directive [-Wextra-tokens]');
    expect(messages[0].location.file).toBe(fixitPath);
    expect(messages[0].location.position).toEqual([[3, 7], [3, 14]]);
    expect(messages[0].solutions.length).toBe(1);
    expect(messages[0].solutions[0].position).toEqual([[3, 7], [3, 7]]);
    expect(messages[0].solutions[0].replaceWith).toBe('//');
  }));

  describe('handles messages in other files', function () {
    (0, _jasmineFix.it)('without another editor open', _asyncToGenerator(function* () {
      var editorA = yield atom.workspace.open(otherAPath);
      var messages = yield lint(editorA);
      expect(messages.length).toBe(1);
      expect(messages[0].severity).toBe('error');
      expect(messages[0].excerpt).toBe("invalid '+=' at end of declaration; did you mean '='?");
      expect(messages[0].location.file).toBe(otherBPath);
      expect(messages[0].location.position).toEqual([[2, 8], [2, 9]]);
    }));

    (0, _jasmineFix.it)('with another editor open', _asyncToGenerator(function* () {
      var editorA = yield atom.workspace.open(otherAPath);
      yield atom.workspace.open(otherBPath);
      var messages = yield lint(editorA);
      expect(messages.length).toBe(1);
      expect(messages[0].severity).toBe('error');
      expect(messages[0].excerpt).toBe("invalid '+=' at end of declaration; did you mean '='?");
      expect(messages[0].location.file).toBe(otherBPath);
      expect(messages[0].location.position).toEqual([[2, 8], [2, 12]]);
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,