function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _assert = require('assert');

var _assert2 = _interopRequireDefault(_assert);

var _libProvidersHighlight = require('../lib/providers-highlight');

var _libProvidersHighlight2 = _interopRequireDefault(_libProvidersHighlight);

describe('ProvidersHighlight', function () {
  var providersHighlight = undefined;
  var editor = undefined;

  beforeEach(function () {
    if (providersHighlight) {
      providersHighlight.dispose();
    }
    providersHighlight = new _libProvidersHighlight2['default']();
    atom.workspace.destroyActivePane();
    waitsForPromise(function () {
      return atom.workspace.open(__filename).then(function () {
        editor = atom.workspace.getActiveTextEditor();
      });
    });
    atom.packages.activatePackage('language-javascript');
  });
  function addProvider(provider) {
    return providersHighlight.addProvider(provider);
  }
  function deleteProvider(provider) {
    providersHighlight.deleteProvider(provider);
  }

  describe('addProvider', function () {
    it('validates parameters properly', function () {
      expect(function () {
        addProvider();
      }).toThrow();
      expect(function () {
        addProvider(null);
      }).toThrow();
      expect(function () {
        addProvider(1);
      }).toThrow();
      expect(function () {
        addProvider(false);
      }).toThrow();
      expect(function () {
        addProvider(true);
      }).toThrow();

      expect(function () {
        addProvider({
          grammarScopes: false
        });
      }).toThrow();
      expect(function () {
        addProvider({
          grammarScopes: null
        });
      }).toThrow();
      expect(function () {
        addProvider({
          grammarScopes: true
        });
      }).toThrow();
      expect(function () {
        addProvider({
          grammarScopes: 5
        });
      }).toThrow();

      expect(function () {
        addProvider({
          grammarScopes: [],
          getIntentions: false
        });
      }).toThrow();
      expect(function () {
        addProvider({
          grammarScopes: [],
          getIntentions: null
        });
      }).toThrow();
      expect(function () {
        addProvider({
          grammarScopes: [],
          getIntentions: true
        });
      }).toThrow();
      expect(function () {
        addProvider({
          grammarScopes: [],
          getIntentions: 20
        });
      }).toThrow();
      addProvider({
        grammarScopes: [],
        getIntentions: function getIntentions() {}
      });
    });
  });
  describe('hasProvider', function () {
    it('works properly', function () {
      var provider = {
        grammarScopes: [],
        getIntentions: function getIntentions() {
          throw new Error();
        }
      };
      expect(providersHighlight.hasProvider(provider)).toBe(false);
      providersHighlight.addProvider(provider);
      expect(providersHighlight.hasProvider(provider)).toBe(true);
    });
  });
  describe('deleteProvider', function () {
    it('works properly', function () {
      deleteProvider(true);
      deleteProvider(null);
      deleteProvider(false);
      deleteProvider(50);
      var provider = {
        grammarScopes: [],
        getIntentions: function getIntentions() {
          throw new Error();
        }
      };
      expect(providersHighlight.hasProvider(provider)).toBe(false);
      providersHighlight.addProvider(provider);
      expect(providersHighlight.hasProvider(provider)).toBe(true);
      providersHighlight.deleteProvider(provider);
      expect(providersHighlight.hasProvider(provider)).toBe(false);
    });
  });
  describe('trigger', function () {
    it('works properly', function () {
      var intention = {
        range: [[0, 1], [1, Infinity]],
        'class': 'something',
        created: function created() {}
      };
      addProvider({
        grammarScopes: ['*'],
        getIntentions: function getIntentions() {
          return [intention];
        }
      });
      waitsForPromise(function () {
        return providersHighlight.trigger(editor).then(function (results) {
          (0, _assert2['default'])(Array.isArray(results));
          expect(results[0]).toBe(intention);
        });
      });
    });
    it('ignores previous result from executed twice instantly', function () {
      var count = 0;
      var intentionFirst = {
        range: [[0, 1], [1, Infinity]],
        'class': 'something',
        created: function created() {}
      };
      var intentionSecond = {
        range: [[0, 1], [1, Infinity]],
        created: function created() {}
      };
      addProvider({
        grammarScopes: ['*'],
        getIntentions: function getIntentions() {
          if (++count === 1) {
            return [intentionFirst];
          }
          return [intentionSecond];
        }
      });
      var promiseFirst = providersHighlight.trigger(editor);
      var promiseSecond = providersHighlight.trigger(editor);

      waitsForPromise(function () {
        return promiseFirst.then(function (results) {
          expect(results).toEqual([]);
        });
      });
      waitsForPromise(function () {
        return promiseSecond.then(function (results) {
          (0, _assert2['default'])(Array.isArray(results));
          expect(results[0]).toBe(intentionSecond);
        });
      });
    });
    it('does not enable it if providers return no results, including non-array ones', function () {
      addProvider({
        grammarScopes: ['*'],
        getIntentions: function getIntentions() {
          return [];
        }
      });
      addProvider({
        grammarScopes: ['*'],
        getIntentions: function getIntentions() {
          return null;
        }
      });
      addProvider({
        grammarScopes: ['*'],
        getIntentions: function getIntentions() {
          return false;
        }
      });
      addProvider({
        grammarScopes: ['*'],
        getIntentions: function getIntentions() {
          return 50;
        }
      });
      addProvider({
        grammarScopes: ['*'],
        getIntentions: function getIntentions() {}
      });
      waitsForPromise(function () {
        return providersHighlight.trigger(editor).then(function (results) {
          expect(results).toEqual([]);
        });
      });
    });
    it('emits an error if provider throws an error', function () {
      providersHighlight.addProvider({
        grammarScopes: ['*'],
        getIntentions: function getIntentions() {
          throw new Error('test from provider');
        }
      });
      waitsForPromise(function () {
        return providersHighlight.trigger(editor).then(function () {
          expect(false).toBe(true);
        }, function (e) {
          expect(e.message).toBe('test from provider');
        });
      });
    });
    it('validates suggestions properly', function () {
      addProvider({
        grammarScopes: ['*'],
        getIntentions: function getIntentions() {
          return [{}];
        }
      });
      waitsForPromise(function () {
        return providersHighlight.trigger(editor).then(function () {
          expect(false).toBe(true);
        }, function (e) {
          expect(e instanceof Error).toBe(true);
        });
      });
    });
    it('triggers providers based on scope', function () {
      var coffeeCalled = false;
      var jsCalled = false;
      addProvider({
        grammarScopes: ['source.js'],
        getIntentions: function getIntentions() {
          jsCalled = true;
        }
      });
      addProvider({
        grammarScopes: ['source.coffee'],
        getIntentions: function getIntentions() {
          coffeeCalled = true;
        }
      });
      waitsForPromise(function () {
        return providersHighlight.trigger(editor).then(function () {
          expect(jsCalled).toBe(true);
          expect(coffeeCalled).toBe(false);
        });
      });
    });
  });

  it('automatically updates length of decoration everytime coordinates update', function () {
    var element = undefined;
    var jsCalled = false;
    var range = [[2, 0], [2, 5]];
    addProvider({
      grammarScopes: ['source.js'],
      getIntentions: function getIntentions() {
        jsCalled = true;
        return [{
          range: range,
          created: function created(_ref) {
            var _element = _ref.element;

            element = _element;
          }
        }];
      }
    });
    waitsForPromise(function () {
      return providersHighlight.trigger(editor).then(function (intentions) {
        (0, _assert2['default'])(Array.isArray(intentions));
        expect(jsCalled).toBe(true);
        expect(element).not.toBeDefined();
        providersHighlight.paint(editor, intentions);
        expect(element).toBeDefined();
        expect(element.textContent.length).toBe(5);
        editor.setTextInBufferRange(range, 'something');
        expect(element.textContent.length).toBe(9);
      });
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,