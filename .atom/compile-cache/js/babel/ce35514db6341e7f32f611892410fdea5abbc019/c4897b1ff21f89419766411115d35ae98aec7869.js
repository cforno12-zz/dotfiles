'use babel';

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.activate = activate;
exports.deactivate = deactivate;
var disposables = null;
var fontStylesheetDisposable = null;

function activate() {
  var _require = require('atom');

  var CompositeDisposable = _require.CompositeDisposable;

  disposables = new CompositeDisposable();

  // apply fonts when atom is ready
  applyFont();

  // apply fonts when config changes
  // after config changes measurements are already triggered by atom
  disposables.add(atom.config.onDidChange('fonts.fontFamily', applyFont), atom.config.onDidChange('fonts.secondaryFonts', applyFont));

  // give chromium some time to load the fonts
  // then trigger measurements
  setTimeout(triggerMeasurements, 500);

  if (document.querySelector('fonts-fixer') === null) {
    disposables.add(addFixerElement());
  }
}

function deactivate() {
  if (disposables) disposables.dispose();
  if (fontStylesheetDisposable) fontStylesheetDisposable.dispose();
  disposables = null;
  fontStylesheetDisposable = null;
}

function triggerMeasurements() {
  atom.workspace.increaseFontSize();
  atom.workspace.decreaseFontSize();
}

function applyFont() {
  var font = '\'' + atom.config.get('fonts.fontFamily') + '\', ' + atom.config.get('fonts.secondaryFonts');

  // NOTE: since `sourcePath` is specified, there is no need to
  // dispose of fontStylesheetDisposable here, the same style element
  // will be updated, and the newly-returned disposable will be
  // exactly the same functionally as the old one.
  fontStylesheetDisposable = atom.styles.addStyleSheet(':root { --fonts-package-editorfont: ' + font + '; }', {
    sourcePath: 'fonts-package-editorfont'
  });

  triggerMeasurements();
}

function addFixerElement() {
  // create a fixer element that forces chrome to load font styles
  // contains *r*egular, *b*old, *i*talic and i in b
  var fixer = document.createElement('fonts-fixer');
  fixer.innerHTML = 'regular<b>bold<i>italic</i></b><i>italic</i>';
  atom.views.getView(atom.workspace).appendChild(fixer);

  var _require2 = require('atom');

  var Disposable = _require2.Disposable;

  return new Disposable(function () {
    fixer.remove();
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9DcmlzRm9ybm8vZG90ZmlsZXMvLmF0b20vcGFja2FnZXMvZm9udHMvbGliL2ZvbnRzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLFdBQVcsQ0FBQTs7Ozs7OztBQUVYLElBQUksV0FBVyxHQUFHLElBQUksQ0FBQTtBQUN0QixJQUFJLHdCQUF3QixHQUFHLElBQUksQ0FBQTs7QUFFNUIsU0FBUyxRQUFRLEdBQUc7aUJBQ08sT0FBTyxDQUFDLE1BQU0sQ0FBQzs7TUFBdkMsbUJBQW1CLFlBQW5CLG1CQUFtQjs7QUFDM0IsYUFBVyxHQUFHLElBQUksbUJBQW1CLEVBQUUsQ0FBQTs7O0FBR3ZDLFdBQVMsRUFBRSxDQUFBOzs7O0FBSVgsYUFBVyxDQUFDLEdBQUcsQ0FDYixJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxrQkFBa0IsRUFBRSxTQUFTLENBQUMsRUFDdEQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsc0JBQXNCLEVBQUUsU0FBUyxDQUFDLENBQzNELENBQUE7Ozs7QUFJRCxZQUFVLENBQUMsbUJBQW1CLEVBQUUsR0FBRyxDQUFDLENBQUE7O0FBRXBDLE1BQUksUUFBUSxDQUFDLGFBQWEsQ0FBQyxhQUFhLENBQUMsS0FBSyxJQUFJLEVBQUU7QUFDbEQsZUFBVyxDQUFDLEdBQUcsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFBO0dBQ25DO0NBQ0Y7O0FBRU0sU0FBUyxVQUFVLEdBQUc7QUFDM0IsTUFBSSxXQUFXLEVBQUUsV0FBVyxDQUFDLE9BQU8sRUFBRSxDQUFBO0FBQ3RDLE1BQUksd0JBQXdCLEVBQUUsd0JBQXdCLENBQUMsT0FBTyxFQUFFLENBQUE7QUFDaEUsYUFBVyxHQUFHLElBQUksQ0FBQTtBQUNsQiwwQkFBd0IsR0FBRyxJQUFJLENBQUE7Q0FDaEM7O0FBRUQsU0FBUyxtQkFBbUIsR0FBRztBQUM3QixNQUFJLENBQUMsU0FBUyxDQUFDLGdCQUFnQixFQUFFLENBQUE7QUFDakMsTUFBSSxDQUFDLFNBQVMsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFBO0NBQ2xDOztBQUVELFNBQVMsU0FBUyxHQUFHO0FBQ25CLE1BQU0sSUFBSSxHQUNSLE9BQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsa0JBQWtCLENBQUMsWUFDdkMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsc0JBQXNCLENBQUMsQ0FBQTs7Ozs7O0FBTXpDLDBCQUF3QixHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsYUFBYSwwQ0FDWCxJQUFJLFVBQzNDO0FBQ0UsY0FBVSxFQUFFLDBCQUEwQjtHQUN2QyxDQUNGLENBQUE7O0FBRUQscUJBQW1CLEVBQUUsQ0FBQTtDQUN0Qjs7QUFFRCxTQUFTLGVBQWUsR0FBRzs7O0FBR3pCLE1BQU0sS0FBSyxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsYUFBYSxDQUFDLENBQUE7QUFDbkQsT0FBSyxDQUFDLFNBQVMsR0FBRyw4Q0FBOEMsQ0FBQTtBQUNoRSxNQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFBOztrQkFDOUIsT0FBTyxDQUFDLE1BQU0sQ0FBQzs7TUFBOUIsVUFBVSxhQUFWLFVBQVU7O0FBQ2xCLFNBQU8sSUFBSSxVQUFVLENBQUMsWUFBVztBQUMvQixTQUFLLENBQUMsTUFBTSxFQUFFLENBQUE7R0FDZixDQUFDLENBQUE7Q0FDSCIsImZpbGUiOiIvVXNlcnMvQ3Jpc0Zvcm5vL2RvdGZpbGVzLy5hdG9tL3BhY2thZ2VzL2ZvbnRzL2xpYi9mb250cy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2UgYmFiZWwnXG5cbmxldCBkaXNwb3NhYmxlcyA9IG51bGxcbmxldCBmb250U3R5bGVzaGVldERpc3Bvc2FibGUgPSBudWxsXG5cbmV4cG9ydCBmdW5jdGlvbiBhY3RpdmF0ZSgpIHtcbiAgY29uc3QgeyBDb21wb3NpdGVEaXNwb3NhYmxlIH0gPSByZXF1aXJlKCdhdG9tJylcbiAgZGlzcG9zYWJsZXMgPSBuZXcgQ29tcG9zaXRlRGlzcG9zYWJsZSgpXG5cbiAgLy8gYXBwbHkgZm9udHMgd2hlbiBhdG9tIGlzIHJlYWR5XG4gIGFwcGx5Rm9udCgpXG5cbiAgLy8gYXBwbHkgZm9udHMgd2hlbiBjb25maWcgY2hhbmdlc1xuICAvLyBhZnRlciBjb25maWcgY2hhbmdlcyBtZWFzdXJlbWVudHMgYXJlIGFscmVhZHkgdHJpZ2dlcmVkIGJ5IGF0b21cbiAgZGlzcG9zYWJsZXMuYWRkKFxuICAgIGF0b20uY29uZmlnLm9uRGlkQ2hhbmdlKCdmb250cy5mb250RmFtaWx5JywgYXBwbHlGb250KSxcbiAgICBhdG9tLmNvbmZpZy5vbkRpZENoYW5nZSgnZm9udHMuc2Vjb25kYXJ5Rm9udHMnLCBhcHBseUZvbnQpLFxuICApXG5cbiAgLy8gZ2l2ZSBjaHJvbWl1bSBzb21lIHRpbWUgdG8gbG9hZCB0aGUgZm9udHNcbiAgLy8gdGhlbiB0cmlnZ2VyIG1lYXN1cmVtZW50c1xuICBzZXRUaW1lb3V0KHRyaWdnZXJNZWFzdXJlbWVudHMsIDUwMClcblxuICBpZiAoZG9jdW1lbnQucXVlcnlTZWxlY3RvcignZm9udHMtZml4ZXInKSA9PT0gbnVsbCkge1xuICAgIGRpc3Bvc2FibGVzLmFkZChhZGRGaXhlckVsZW1lbnQoKSlcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZGVhY3RpdmF0ZSgpIHtcbiAgaWYgKGRpc3Bvc2FibGVzKSBkaXNwb3NhYmxlcy5kaXNwb3NlKClcbiAgaWYgKGZvbnRTdHlsZXNoZWV0RGlzcG9zYWJsZSkgZm9udFN0eWxlc2hlZXREaXNwb3NhYmxlLmRpc3Bvc2UoKVxuICBkaXNwb3NhYmxlcyA9IG51bGxcbiAgZm9udFN0eWxlc2hlZXREaXNwb3NhYmxlID0gbnVsbFxufVxuXG5mdW5jdGlvbiB0cmlnZ2VyTWVhc3VyZW1lbnRzKCkge1xuICBhdG9tLndvcmtzcGFjZS5pbmNyZWFzZUZvbnRTaXplKClcbiAgYXRvbS53b3Jrc3BhY2UuZGVjcmVhc2VGb250U2l6ZSgpXG59XG5cbmZ1bmN0aW9uIGFwcGx5Rm9udCgpIHtcbiAgY29uc3QgZm9udCA9XG4gICAgYCcke2F0b20uY29uZmlnLmdldCgnZm9udHMuZm9udEZhbWlseScpfScsIGAgK1xuICAgIGF0b20uY29uZmlnLmdldCgnZm9udHMuc2Vjb25kYXJ5Rm9udHMnKVxuXG4gIC8vIE5PVEU6IHNpbmNlIGBzb3VyY2VQYXRoYCBpcyBzcGVjaWZpZWQsIHRoZXJlIGlzIG5vIG5lZWQgdG9cbiAgLy8gZGlzcG9zZSBvZiBmb250U3R5bGVzaGVldERpc3Bvc2FibGUgaGVyZSwgdGhlIHNhbWUgc3R5bGUgZWxlbWVudFxuICAvLyB3aWxsIGJlIHVwZGF0ZWQsIGFuZCB0aGUgbmV3bHktcmV0dXJuZWQgZGlzcG9zYWJsZSB3aWxsIGJlXG4gIC8vIGV4YWN0bHkgdGhlIHNhbWUgZnVuY3Rpb25hbGx5IGFzIHRoZSBvbGQgb25lLlxuICBmb250U3R5bGVzaGVldERpc3Bvc2FibGUgPSBhdG9tLnN0eWxlcy5hZGRTdHlsZVNoZWV0KFxuICAgIGA6cm9vdCB7IC0tZm9udHMtcGFja2FnZS1lZGl0b3Jmb250OiAke2ZvbnR9OyB9YCxcbiAgICB7XG4gICAgICBzb3VyY2VQYXRoOiAnZm9udHMtcGFja2FnZS1lZGl0b3Jmb250J1xuICAgIH0sXG4gIClcblxuICB0cmlnZ2VyTWVhc3VyZW1lbnRzKClcbn1cblxuZnVuY3Rpb24gYWRkRml4ZXJFbGVtZW50KCkge1xuICAvLyBjcmVhdGUgYSBmaXhlciBlbGVtZW50IHRoYXQgZm9yY2VzIGNocm9tZSB0byBsb2FkIGZvbnQgc3R5bGVzXG4gIC8vIGNvbnRhaW5zICpyKmVndWxhciwgKmIqb2xkLCAqaSp0YWxpYyBhbmQgaSBpbiBiXG4gIGNvbnN0IGZpeGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZm9udHMtZml4ZXInKVxuICBmaXhlci5pbm5lckhUTUwgPSAncmVndWxhcjxiPmJvbGQ8aT5pdGFsaWM8L2k+PC9iPjxpPml0YWxpYzwvaT4nXG4gIGF0b20udmlld3MuZ2V0VmlldyhhdG9tLndvcmtzcGFjZSkuYXBwZW5kQ2hpbGQoZml4ZXIpXG4gIGNvbnN0IHsgRGlzcG9zYWJsZSB9ID0gcmVxdWlyZSgnYXRvbScpXG4gIHJldHVybiBuZXcgRGlzcG9zYWJsZShmdW5jdGlvbigpIHtcbiAgICBmaXhlci5yZW1vdmUoKVxuICB9KVxufVxuIl19