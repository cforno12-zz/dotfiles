function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { var callNext = step.bind(null, 'next'); var callThrow = step.bind(null, 'throw'); function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(callNext, callThrow); } } callNext(); }); }; }

var _atom = require('atom');

var _jasmineFix = require('jasmine-fix');

var _libEditor = require('../lib/editor');

var _libEditor2 = _interopRequireDefault(_libEditor);

var _helpers = require('./helpers');

describe('Editor', function () {
  var editor = undefined;
  var message = undefined;
  var textEditor = undefined;

  (0, _jasmineFix.beforeEach)(_asyncToGenerator(function* () {
    message = (0, _helpers.getMessage)();
    message.range = [[2, 0], [2, 1]];
    message.filePath = __filename;
    yield atom.workspace.open(__filename);
    textEditor = atom.workspace.getActiveTextEditor();
    editor = new _libEditor2['default'](textEditor);
    atom.packages.loadPackage('linter-ui-default');
  }));
  afterEach(function () {
    editor.dispose();
    atom.workspace.destroyActivePaneItem();
  });

  describe('apply', function () {
    it('applies the messages to the editor', function () {
      expect(textEditor.getBuffer().getMarkerCount()).toBe(0);
      editor.apply([message], []);
      expect(textEditor.getBuffer().getMarkerCount()).toBe(1);
      editor.apply([], [message]);
      expect(textEditor.getBuffer().getMarkerCount()).toBe(0);
    });
    it('makes sure that the message is updated if text is manipulated', function () {
      expect(textEditor.getBuffer().getMarkerCount()).toBe(0);
      editor.apply([message], []);
      expect(textEditor.getBuffer().getMarkerCount()).toBe(1);
      expect(_atom.Range.fromObject(message.range)).toEqual({ start: { row: 2, column: 0 }, end: { row: 2, column: 1 } });
      textEditor.getBuffer().insert([2, 0], 'Hello');
      expect(_atom.Range.fromObject(message.range)).toEqual({ start: { row: 2, column: 0 }, end: { row: 2, column: 6 } });
      editor.apply([], [message]);
      expect(_atom.Range.fromObject(message.range)).toEqual({ start: { row: 2, column: 0 }, end: { row: 2, column: 6 } });
      expect(textEditor.getBuffer().getMarkerCount()).toBe(0);
    });
  });
  describe('Response to config', function () {
    it('responds to `gutterPosition`', function () {
      atom.config.set('linter-ui-default.gutterPosition', 'Left');
      expect(editor.gutter && editor.gutter.priority).toBe(-100);
      atom.config.set('linter-ui-default.gutterPosition', 'Right');
      expect(editor.gutter && editor.gutter.priority).toBe(100);
    });
    it('responds to `showDecorations`', function () {
      atom.config.set('linter-ui-default.showDecorations', false);
      expect(editor.gutter).toBe(null);
      atom.config.set('linter-ui-default.showDecorations', true);
      expect(editor.gutter).not.toBe(null);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9DcmlzRm9ybm8vLmF0b20vcGFja2FnZXMvbGludGVyLXVpLWRlZmF1bHQvc3BlYy9lZGl0b3Itc3BlYy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O29CQUVzQixNQUFNOzswQkFDRCxhQUFhOzt5QkFDckIsZUFBZTs7Ozt1QkFDUCxXQUFXOztBQUV0QyxRQUFRLENBQUMsUUFBUSxFQUFFLFlBQVc7QUFDNUIsTUFBSSxNQUFNLFlBQUEsQ0FBQTtBQUNWLE1BQUksT0FBTyxZQUFBLENBQUE7QUFDWCxNQUFJLFVBQVUsWUFBQSxDQUFBOztBQUVkLGdEQUFXLGFBQWlCO0FBQzFCLFdBQU8sR0FBRywwQkFBWSxDQUFBO0FBQ3RCLFdBQU8sQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFBO0FBQ2hDLFdBQU8sQ0FBQyxRQUFRLEdBQUcsVUFBVSxDQUFBO0FBQzdCLFVBQU0sSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUE7QUFDckMsY0FBVSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsbUJBQW1CLEVBQUUsQ0FBQTtBQUNqRCxVQUFNLEdBQUcsMkJBQVcsVUFBVSxDQUFDLENBQUE7QUFDL0IsUUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsbUJBQW1CLENBQUMsQ0FBQTtHQUMvQyxFQUFDLENBQUE7QUFDRixXQUFTLENBQUMsWUFBVztBQUNuQixVQUFNLENBQUMsT0FBTyxFQUFFLENBQUE7QUFDaEIsUUFBSSxDQUFDLFNBQVMsQ0FBQyxxQkFBcUIsRUFBRSxDQUFBO0dBQ3ZDLENBQUMsQ0FBQTs7QUFFRixVQUFRLENBQUMsT0FBTyxFQUFFLFlBQVc7QUFDM0IsTUFBRSxDQUFDLG9DQUFvQyxFQUFFLFlBQVc7QUFDbEQsWUFBTSxDQUFDLFVBQVUsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxjQUFjLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQTtBQUN2RCxZQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsT0FBTyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUE7QUFDM0IsWUFBTSxDQUFDLFVBQVUsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxjQUFjLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQTtBQUN2RCxZQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUE7QUFDM0IsWUFBTSxDQUFDLFVBQVUsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxjQUFjLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQTtLQUN4RCxDQUFDLENBQUE7QUFDRixNQUFFLENBQUMsK0RBQStELEVBQUUsWUFBVztBQUM3RSxZQUFNLENBQUMsVUFBVSxDQUFDLFNBQVMsRUFBRSxDQUFDLGNBQWMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFBO0FBQ3ZELFlBQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxPQUFPLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQTtBQUMzQixZQUFNLENBQUMsVUFBVSxDQUFDLFNBQVMsRUFBRSxDQUFDLGNBQWMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFBO0FBQ3ZELFlBQU0sQ0FBQyxZQUFNLFVBQVUsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsRUFBRSxLQUFLLEVBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRSxHQUFHLEVBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUE7QUFDN0csZ0JBQVUsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUE7QUFDOUMsWUFBTSxDQUFDLFlBQU0sVUFBVSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxFQUFFLEtBQUssRUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUUsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFLEdBQUcsRUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUUsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQTtBQUM3RyxZQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUE7QUFDM0IsWUFBTSxDQUFDLFlBQU0sVUFBVSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxFQUFFLEtBQUssRUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUUsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFLEdBQUcsRUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUUsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQTtBQUM3RyxZQUFNLENBQUMsVUFBVSxDQUFDLFNBQVMsRUFBRSxDQUFDLGNBQWMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQ3hELENBQUMsQ0FBQTtHQUNILENBQUMsQ0FBQTtBQUNGLFVBQVEsQ0FBQyxvQkFBb0IsRUFBRSxZQUFXO0FBQ3hDLE1BQUUsQ0FBQyw4QkFBOEIsRUFBRSxZQUFXO0FBQzVDLFVBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLGtDQUFrQyxFQUFFLE1BQU0sQ0FBQyxDQUFBO0FBQzNELFlBQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxJQUFJLE1BQU0sQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUE7QUFDMUQsVUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsa0NBQWtDLEVBQUUsT0FBTyxDQUFDLENBQUE7QUFDNUQsWUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLElBQUksTUFBTSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUE7S0FDMUQsQ0FBQyxDQUFBO0FBQ0YsTUFBRSxDQUFDLCtCQUErQixFQUFFLFlBQVc7QUFDN0MsVUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsbUNBQW1DLEVBQUUsS0FBSyxDQUFDLENBQUE7QUFDM0QsWUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUE7QUFDaEMsVUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsbUNBQW1DLEVBQUUsSUFBSSxDQUFDLENBQUE7QUFDMUQsWUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3JDLENBQUMsQ0FBQTtHQUNILENBQUMsQ0FBQTtDQUNILENBQUMsQ0FBQSIsImZpbGUiOiIvVXNlcnMvQ3Jpc0Zvcm5vLy5hdG9tL3BhY2thZ2VzL2xpbnRlci11aS1kZWZhdWx0L3NwZWMvZWRpdG9yLXNwZWMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBAZmxvdyAqL1xuXG5pbXBvcnQgeyBSYW5nZSB9IGZyb20gJ2F0b20nXG5pbXBvcnQgeyBiZWZvcmVFYWNoIH0gZnJvbSAnamFzbWluZS1maXgnXG5pbXBvcnQgRWRpdG9yIGZyb20gJy4uL2xpYi9lZGl0b3InXG5pbXBvcnQgeyBnZXRNZXNzYWdlIH0gZnJvbSAnLi9oZWxwZXJzJ1xuXG5kZXNjcmliZSgnRWRpdG9yJywgZnVuY3Rpb24oKSB7XG4gIGxldCBlZGl0b3JcbiAgbGV0IG1lc3NhZ2VcbiAgbGV0IHRleHRFZGl0b3JcblxuICBiZWZvcmVFYWNoKGFzeW5jIGZ1bmN0aW9uKCkge1xuICAgIG1lc3NhZ2UgPSBnZXRNZXNzYWdlKClcbiAgICBtZXNzYWdlLnJhbmdlID0gW1syLCAwXSwgWzIsIDFdXVxuICAgIG1lc3NhZ2UuZmlsZVBhdGggPSBfX2ZpbGVuYW1lXG4gICAgYXdhaXQgYXRvbS53b3Jrc3BhY2Uub3BlbihfX2ZpbGVuYW1lKVxuICAgIHRleHRFZGl0b3IgPSBhdG9tLndvcmtzcGFjZS5nZXRBY3RpdmVUZXh0RWRpdG9yKClcbiAgICBlZGl0b3IgPSBuZXcgRWRpdG9yKHRleHRFZGl0b3IpXG4gICAgYXRvbS5wYWNrYWdlcy5sb2FkUGFja2FnZSgnbGludGVyLXVpLWRlZmF1bHQnKVxuICB9KVxuICBhZnRlckVhY2goZnVuY3Rpb24oKSB7XG4gICAgZWRpdG9yLmRpc3Bvc2UoKVxuICAgIGF0b20ud29ya3NwYWNlLmRlc3Ryb3lBY3RpdmVQYW5lSXRlbSgpXG4gIH0pXG5cbiAgZGVzY3JpYmUoJ2FwcGx5JywgZnVuY3Rpb24oKSB7XG4gICAgaXQoJ2FwcGxpZXMgdGhlIG1lc3NhZ2VzIHRvIHRoZSBlZGl0b3InLCBmdW5jdGlvbigpIHtcbiAgICAgIGV4cGVjdCh0ZXh0RWRpdG9yLmdldEJ1ZmZlcigpLmdldE1hcmtlckNvdW50KCkpLnRvQmUoMClcbiAgICAgIGVkaXRvci5hcHBseShbbWVzc2FnZV0sIFtdKVxuICAgICAgZXhwZWN0KHRleHRFZGl0b3IuZ2V0QnVmZmVyKCkuZ2V0TWFya2VyQ291bnQoKSkudG9CZSgxKVxuICAgICAgZWRpdG9yLmFwcGx5KFtdLCBbbWVzc2FnZV0pXG4gICAgICBleHBlY3QodGV4dEVkaXRvci5nZXRCdWZmZXIoKS5nZXRNYXJrZXJDb3VudCgpKS50b0JlKDApXG4gICAgfSlcbiAgICBpdCgnbWFrZXMgc3VyZSB0aGF0IHRoZSBtZXNzYWdlIGlzIHVwZGF0ZWQgaWYgdGV4dCBpcyBtYW5pcHVsYXRlZCcsIGZ1bmN0aW9uKCkge1xuICAgICAgZXhwZWN0KHRleHRFZGl0b3IuZ2V0QnVmZmVyKCkuZ2V0TWFya2VyQ291bnQoKSkudG9CZSgwKVxuICAgICAgZWRpdG9yLmFwcGx5KFttZXNzYWdlXSwgW10pXG4gICAgICBleHBlY3QodGV4dEVkaXRvci5nZXRCdWZmZXIoKS5nZXRNYXJrZXJDb3VudCgpKS50b0JlKDEpXG4gICAgICBleHBlY3QoUmFuZ2UuZnJvbU9iamVjdChtZXNzYWdlLnJhbmdlKSkudG9FcXVhbCh7IHN0YXJ0OiB7IHJvdzogMiwgY29sdW1uOiAwIH0sIGVuZDogeyByb3c6IDIsIGNvbHVtbjogMSB9IH0pXG4gICAgICB0ZXh0RWRpdG9yLmdldEJ1ZmZlcigpLmluc2VydChbMiwgMF0sICdIZWxsbycpXG4gICAgICBleHBlY3QoUmFuZ2UuZnJvbU9iamVjdChtZXNzYWdlLnJhbmdlKSkudG9FcXVhbCh7IHN0YXJ0OiB7IHJvdzogMiwgY29sdW1uOiAwIH0sIGVuZDogeyByb3c6IDIsIGNvbHVtbjogNiB9IH0pXG4gICAgICBlZGl0b3IuYXBwbHkoW10sIFttZXNzYWdlXSlcbiAgICAgIGV4cGVjdChSYW5nZS5mcm9tT2JqZWN0KG1lc3NhZ2UucmFuZ2UpKS50b0VxdWFsKHsgc3RhcnQ6IHsgcm93OiAyLCBjb2x1bW46IDAgfSwgZW5kOiB7IHJvdzogMiwgY29sdW1uOiA2IH0gfSlcbiAgICAgIGV4cGVjdCh0ZXh0RWRpdG9yLmdldEJ1ZmZlcigpLmdldE1hcmtlckNvdW50KCkpLnRvQmUoMClcbiAgICB9KVxuICB9KVxuICBkZXNjcmliZSgnUmVzcG9uc2UgdG8gY29uZmlnJywgZnVuY3Rpb24oKSB7XG4gICAgaXQoJ3Jlc3BvbmRzIHRvIGBndXR0ZXJQb3NpdGlvbmAnLCBmdW5jdGlvbigpIHtcbiAgICAgIGF0b20uY29uZmlnLnNldCgnbGludGVyLXVpLWRlZmF1bHQuZ3V0dGVyUG9zaXRpb24nLCAnTGVmdCcpXG4gICAgICBleHBlY3QoZWRpdG9yLmd1dHRlciAmJiBlZGl0b3IuZ3V0dGVyLnByaW9yaXR5KS50b0JlKC0xMDApXG4gICAgICBhdG9tLmNvbmZpZy5zZXQoJ2xpbnRlci11aS1kZWZhdWx0Lmd1dHRlclBvc2l0aW9uJywgJ1JpZ2h0JylcbiAgICAgIGV4cGVjdChlZGl0b3IuZ3V0dGVyICYmIGVkaXRvci5ndXR0ZXIucHJpb3JpdHkpLnRvQmUoMTAwKVxuICAgIH0pXG4gICAgaXQoJ3Jlc3BvbmRzIHRvIGBzaG93RGVjb3JhdGlvbnNgJywgZnVuY3Rpb24oKSB7XG4gICAgICBhdG9tLmNvbmZpZy5zZXQoJ2xpbnRlci11aS1kZWZhdWx0LnNob3dEZWNvcmF0aW9ucycsIGZhbHNlKVxuICAgICAgZXhwZWN0KGVkaXRvci5ndXR0ZXIpLnRvQmUobnVsbClcbiAgICAgIGF0b20uY29uZmlnLnNldCgnbGludGVyLXVpLWRlZmF1bHQuc2hvd0RlY29yYXRpb25zJywgdHJ1ZSlcbiAgICAgIGV4cGVjdChlZGl0b3IuZ3V0dGVyKS5ub3QudG9CZShudWxsKVxuICAgIH0pXG4gIH0pXG59KVxuIl19