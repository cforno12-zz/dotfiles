function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { var callNext = step.bind(null, 'next'); var callThrow = step.bind(null, 'throw'); function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(callNext, callThrow); } } callNext(); }); }; }

var _jasmineFix = require('jasmine-fix');

var _libToggleView = require('../lib/toggle-view');

var _libToggleView2 = _interopRequireDefault(_libToggleView);

describe('Toggle View', function () {
  beforeEach(function () {
    atom.config.set('linter.disabledProviders', []);
  });

  describe('::getItems', function () {
    (0, _jasmineFix.it)('returns disabled when enabling', _asyncToGenerator(function* () {
      var toggleView = new _libToggleView2['default']('enable', ['Package 1', 'Package 2', 'Package 3']);
      atom.config.set('linter.disabledProviders', ['Package 2']);
      expect((yield toggleView.getItems())).toEqual(['Package 2']);
    }));
    (0, _jasmineFix.it)('returns enabled when disabling', _asyncToGenerator(function* () {
      var toggleView = new _libToggleView2['default']('disable', ['Package 1', 'Package 2', 'Package 3']);
      atom.config.set('linter.disabledProviders', ['Package 2']);
      expect((yield toggleView.getItems())).toEqual(['Package 1', 'Package 3']);
    }));
  });
  (0, _jasmineFix.it)('has a working lifecycle', _asyncToGenerator(function* () {
    var didDisable = [];
    var toggleView = new _libToggleView2['default']('disable', ['Package 1', 'Package 2', 'Package 3']);

    spyOn(toggleView, 'process').andCallThrough();
    spyOn(toggleView, 'getItems').andCallThrough();
    toggleView.onDidDisable(function (name) {
      return didDisable.push(name);
    });

    expect(didDisable).toEqual([]);
    expect(toggleView.process.calls.length).toBe(0);
    expect(toggleView.getItems.calls.length).toBe(0);
    expect(atom.workspace.getModalPanels().length).toBe(0);
    yield toggleView.show();
    expect(didDisable).toEqual([]);
    expect(toggleView.process.calls.length).toBe(0);
    expect(toggleView.getItems.calls.length).toBe(1);
    expect(atom.workspace.getModalPanels().length).toBe(1);

    var element = atom.workspace.getModalPanels()[0].item.element.querySelector('.list-group');
    expect(element.children.length).toBe(3);
    expect(element.children[0].textContent).toBe('Package 1');
    expect(element.children[1].textContent).toBe('Package 2');
    expect(element.children[2].textContent).toBe('Package 3');
    element.children[1].dispatchEvent(new MouseEvent('click'));

    expect(toggleView.process.calls.length).toBe(1);
    expect(toggleView.getItems.calls.length).toBe(1);
    expect(toggleView.process.calls[0].args[0]).toBe('Package 2');
    yield (0, _jasmineFix.wait)(50);
    expect(didDisable).toEqual(['Package 2']);
    expect(atom.config.get('linter.disabledProviders')).toEqual(['Package 2']);
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9DcmlzRm9ybm8vLmF0b20vcGFja2FnZXMvbGludGVyL3NwZWMvdG9nZ2xlLXZpZXctc3BlYy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OzBCQUV5QixhQUFhOzs2QkFFZixvQkFBb0I7Ozs7QUFFM0MsUUFBUSxDQUFDLGFBQWEsRUFBRSxZQUFXO0FBQ2pDLFlBQVUsQ0FBQyxZQUFXO0FBQ3BCLFFBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLDBCQUEwQixFQUFFLEVBQUUsQ0FBQyxDQUFBO0dBQ2hELENBQUMsQ0FBQTs7QUFFRixVQUFRLENBQUMsWUFBWSxFQUFFLFlBQVc7QUFDaEMsd0JBQUcsZ0NBQWdDLG9CQUFFLGFBQWlCO0FBQ3BELFVBQU0sVUFBVSxHQUFHLCtCQUFlLFFBQVEsRUFBRSxDQUFDLFdBQVcsRUFBRSxXQUFXLEVBQUUsV0FBVyxDQUFDLENBQUMsQ0FBQTtBQUNwRixVQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQywwQkFBMEIsRUFBRSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUE7QUFDMUQsWUFBTSxFQUFDLE1BQU0sVUFBVSxDQUFDLFFBQVEsRUFBRSxDQUFBLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFBO0tBQzNELEVBQUMsQ0FBQTtBQUNGLHdCQUFHLGdDQUFnQyxvQkFBRSxhQUFpQjtBQUNwRCxVQUFNLFVBQVUsR0FBRywrQkFBZSxTQUFTLEVBQUUsQ0FBQyxXQUFXLEVBQUUsV0FBVyxFQUFFLFdBQVcsQ0FBQyxDQUFDLENBQUE7QUFDckYsVUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsMEJBQTBCLEVBQUUsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFBO0FBQzFELFlBQU0sRUFBQyxNQUFNLFVBQVUsQ0FBQyxRQUFRLEVBQUUsQ0FBQSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsV0FBVyxFQUFFLFdBQVcsQ0FBQyxDQUFDLENBQUE7S0FDeEUsRUFBQyxD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SyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQTtBQUM3RCxVQUFNLHNCQUFLLEVBQUUsQ0FBQyxDQUFBO0FBQ2QsVUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUE7QUFDekMsVUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLDBCQUEwQixDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFBO0dBQzNFLEVBQUMsQ0FBQTtDQUNILENBQUMsQ0FBQSIsImZpbGUiOiIvVXNlcnMvQ3Jpc0Zvcm5vLy5hdG9tL3BhY2thZ2VzL2xpbnRlci9zcGVjL3RvZ2dsZS12aWV3LXNwZWMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBAZmxvdyAqL1xuXG5pbXBvcnQgeyBpdCwgd2FpdCB9IGZyb20gJ2phc21pbmUtZml4J1xuXG5pbXBvcnQgVG9nZ2xlVmlldyBmcm9tICcuLi9saWIvdG9nZ2xlLXZpZXcnXG5cbmRlc2NyaWJlKCdUb2dnbGUgVmlldycsIGZ1bmN0aW9uKCkge1xuICBiZWZvcmVFYWNoKGZ1bmN0aW9uKCkge1xuICAgIGF0b20uY29uZmlnLnNldCgnbGludGVyLmRpc2FibGVkUHJvdmlkZXJzJywgW10pXG4gIH0pXG5cbiAgZGVzY3JpYmUoJzo6Z2V0SXRlbXMnLCBmdW5jdGlvbigpIHtcbiAgICBpdCgncmV0dXJucyBkaXNhYmxlZCB3aGVuIGVuYWJsaW5nJywgYXN5bmMgZnVuY3Rpb24oKSB7XG4gICAgICBjb25zdCB0b2dnbGVWaWV3ID0gbmV3IFRvZ2dsZVZpZXcoJ2VuYWJsZScsIFsnUGFja2FnZSAxJywgJ1BhY2thZ2UgMicsICdQYWNrYWdlIDMnXSlcbiAgICAgIGF0b20uY29uZmlnLnNldCgnbGludGVyLmRpc2FibGVkUHJvdmlkZXJzJywgWydQYWNrYWdlIDInXSlcbiAgICAgIGV4cGVjdChhd2FpdCB0b2dnbGVWaWV3LmdldEl0ZW1zKCkpLnRvRXF1YWwoWydQYWNrYWdlIDInXSlcbiAgICB9KVxuICAgIGl0KCdyZXR1cm5zIGVuYWJsZWQgd2hlbiBkaXNhYmxpbmcnLCBhc3luYyBmdW5jdGlvbigpIHtcbiAgICAgIGNvbnN0IHRvZ2dsZVZpZXcgPSBuZXcgVG9nZ2xlVmlldygnZGlzYWJsZScsIFsnUGFja2FnZSAxJywgJ1BhY2thZ2UgMicsICdQYWNrYWdlIDMnXSlcbiAgICAgIGF0b20uY29uZmlnLnNldCgnbGludGVyLmRpc2FibGVkUHJvdmlkZXJzJywgWydQYWNrYWdlIDInXSlcbiAgICAgIGV4cGVjdChhd2FpdCB0b2dnbGVWaWV3LmdldEl0ZW1zKCkpLnRvRXF1YWwoWydQYWNrYWdlIDEnLCAnUGFja2FnZSAzJ10pXG4gICAgfSlcbiAgfSlcbiAgaXQoJ2hhcyBhIHdvcmtpbmcgbGlmZWN5Y2xlJywgYXN5bmMgZnVuY3Rpb24oKSB7XG4gICAgY29uc3QgZGlkRGlzYWJsZSA9IFtdXG4gICAgY29uc3QgdG9nZ2xlVmlldyA9IG5ldyBUb2dnbGVWaWV3KCdkaXNhYmxlJywgWydQYWNrYWdlIDEnLCAnUGFja2FnZSAyJywgJ1BhY2thZ2UgMyddKVxuXG4gICAgc3B5T24odG9nZ2xlVmlldywgJ3Byb2Nlc3MnKS5hbmRDYWxsVGhyb3VnaCgpXG4gICAgc3B5T24odG9nZ2xlVmlldywgJ2dldEl0ZW1zJykuYW5kQ2FsbFRocm91Z2goKVxuICAgIHRvZ2dsZVZpZXcub25EaWREaXNhYmxlKG5hbWUgPT4gZGlkRGlzYWJsZS5wdXNoKG5hbWUpKVxuXG4gICAgZXhwZWN0KGRpZERpc2FibGUpLnRvRXF1YWwoW10pXG4gICAgZXhwZWN0KHRvZ2dsZVZpZXcucHJvY2Vzcy5jYWxscy5sZW5ndGgpLnRvQmUoMClcbiAgICBleHBlY3QodG9nZ2xlVmlldy5nZXRJdGVtcy5jYWxscy5sZW5ndGgpLnRvQmUoMClcbiAgICBleHBlY3QoYXRvbS53b3Jrc3BhY2UuZ2V0TW9kYWxQYW5lbHMoKS5sZW5ndGgpLnRvQmUoMClcbiAgICBhd2FpdCB0b2dnbGVWaWV3LnNob3coKVxuICAgIGV4cGVjdChkaWREaXNhYmxlKS50b0VxdWFsKFtdKVxuICAgIGV4cGVjdCh0b2dnbGVWaWV3LnByb2Nlc3MuY2FsbHMubGVuZ3RoKS50b0JlKDApXG4gICAgZXhwZWN0KHRvZ2dsZVZpZXcuZ2V0SXRlbXMuY2FsbHMubGVuZ3RoKS50b0JlKDEpXG4gICAgZXhwZWN0KGF0b20ud29ya3NwYWNlLmdldE1vZGFsUGFuZWxzKCkubGVuZ3RoKS50b0JlKDEpXG5cbiAgICBjb25zdCBlbGVtZW50ID0gYXRvbS53b3Jrc3BhY2UuZ2V0TW9kYWxQYW5lbHMoKVswXS5pdGVtLmVsZW1lbnQucXVlcnlTZWxlY3RvcignLmxpc3QtZ3JvdXAnKVxuICAgIGV4cGVjdChlbGVtZW50LmNoaWxkcmVuLmxlbmd0aCkudG9CZSgzKVxuICAgIGV4cGVjdChlbGVtZW50LmNoaWxkcmVuWzBdLnRleHRDb250ZW50KS50b0JlKCdQYWNrYWdlIDEnKVxuICAgIGV4cGVjdChlbGVtZW50LmNoaWxkcmVuWzFdLnRleHRDb250ZW50KS50b0JlKCdQYWNrYWdlIDInKVxuICAgIGV4cGVjdChlbGVtZW50LmNoaWxkcmVuWzJdLnRleHRDb250ZW50KS50b0JlKCdQYWNrYWdlIDMnKVxuICAgIGVsZW1lbnQuY2hpbGRyZW5bMV0uZGlzcGF0Y2hFdmVudChuZXcgTW91c2VFdmVudCgnY2xpY2snKSlcblxuICAgIGV4cGVjdCh0b2dnbGVWaWV3LnByb2Nlc3MuY2FsbHMubGVuZ3RoKS50b0JlKDEpXG4gICAgZXhwZWN0KHRvZ2dsZVZpZXcuZ2V0SXRlbXMuY2FsbHMubGVuZ3RoKS50b0JlKDEpXG4gICAgZXhwZWN0KHRvZ2dsZVZpZXcucHJvY2Vzcy5jYWxsc1swXS5hcmdzWzBdKS50b0JlKCdQYWNrYWdlIDInKVxuICAgIGF3YWl0IHdhaXQoNTApXG4gICAgZXhwZWN0KGRpZERpc2FibGUpLnRvRXF1YWwoWydQYWNrYWdlIDInXSlcbiAgICBleHBlY3QoYXRvbS5jb25maWcuZ2V0KCdsaW50ZXIuZGlzYWJsZWRQcm92aWRlcnMnKSkudG9FcXVhbChbJ1BhY2thZ2UgMiddKVxuICB9KVxufSlcbiJdfQ==