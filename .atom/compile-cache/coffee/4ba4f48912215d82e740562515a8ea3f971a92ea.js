(function() {
  var findClosingIndex, ref, split;

  ref = require('../lib/utils'), findClosingIndex = ref.findClosingIndex, split = ref.split;

  describe('.split()', function() {
    var tests;
    tests = [['a,b,c', ['a', 'b', 'c']], ['a,b(),c', ['a', 'b()', 'c']], ['a,b(c)', ['a', 'b(c)']], ['a,(b, c)', ['a', '(b,c)']], ['a,(b, c())', ['a', '(b,c())']], ['a(b, c())', ['a(b,c())']], ['a,)(', ['a']], ['a(,', []], ['(,', []], ['(,(,(,)', []], ['a,(,', ['a']], ['a,((),', ['a']], ['a,()),', ['a', '()']]];
    return tests.forEach(function(arg) {
      var expected, source;
      source = arg[0], expected = arg[1];
      return it("splits " + (jasmine.pp(source)) + " as " + (jasmine.pp(expected)), function() {
        return expect(split(source)).toEqual(expected);
      });
    });
  });

  describe('.findClosingIndex()', function() {
    var tests;
    tests = [['a(', -1], ['a()', 2], ['a(((()', -1]];
    return tests.forEach(function(arg) {
      var expected, source;
      source = arg[0], expected = arg[1];
      return it("returs the index of the closing character", function() {
        return expect(findClosingIndex(source, 2, '(', ')')).toEqual(expected);
      });
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiL1VzZXJzL0NyaXNGb3Juby8uYXRvbS9wYWNrYWdlcy9waWdtZW50cy9zcGVjL3V0aWxzLXNwZWMuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUEsTUFBQTs7RUFBQSxNQUE0QixPQUFBLENBQVEsY0FBUixDQUE1QixFQUFDLHVDQUFELEVBQW1COztFQUVuQixRQUFBLENBQVMsVUFBVCxFQUFxQixTQUFBO0FBQ25CLFFBQUE7SUFBQSxLQUFBLEdBQVEsQ0FDTixDQUFDLE9BQUQsRUFBVSxDQUFDLEdBQUQsRUFBTSxHQUFOLEVBQVcsR0FBWCxDQUFWLENBRE0sRUFFTixDQUFDLFNBQUQsRUFBWSxDQUFDLEdBQUQsRUFBTSxLQUFOLEVBQWEsR0FBYixDQUFaLENBRk0sRUFHTixDQUFDLFFBQUQsRUFBVyxDQUFDLEdBQUQsRUFBTSxNQUFOLENBQVgsQ0FITSxFQUlOLENBQUMsVUFBRCxFQUFhLENBQUMsR0FBRCxFQUFNLE9BQU4sQ0FBYixDQUpNLEVBS04sQ0FBQyxZQUFELEVBQWUsQ0FBQyxHQUFELEVBQU0sU0FBTixDQUFmLENBTE0sRUFNTixDQUFDLFdBQUQsRUFBYyxDQUFDLFVBQUQsQ0FBZCxDQU5NLEVBT04sQ0FBQyxNQUFELEVBQVMsQ0FBQyxHQUFELENBQVQsQ0FQTSxFQVFOLENBQUMsS0FBRCxFQUFRLEVBQVIsQ0FSTSxFQVNOLENBQUMsSUFBRCxFQUFPLEVBQVAsQ0FUTSxFQVVOLENBQUMsU0FBRCxFQUFZLEVBQVosQ0FWTSxFQVdOLENBQUMsTUFBRCxFQUFTLENBQUMsR0FBRCxDQUFULENBWE0sRUFZTixDQUFDLFFBQUQsRUFBVyxDQUFDLEdBQUQsQ0FBWCxDQVpNLEVBYU4sQ0FBQyxRQUFELEVBQVcsQ0FBQyxHQUFELEVBQU0sSUFBTixDQUFYLENBYk07V0FnQlIsS0FBSyxDQUFDLE9BQU4sQ0FBYyxTQUFDLEdBQUQ7QUFDWixVQUFBO01BRGMsaUJBQVE7YUFDdEIsRUFBQSxDQUFHLFNBQUEsR0FBUyxDQUFDLE9BQU8sQ0FBQyxFQUFSLENBQVcsTUFBWCxDQUFELENBQVQsR0FBNEIsTUFBNUIsR0FBaUMsQ0FBQyxPQUFPLENBQUMsRUFBUixDQUFXLFFBQVgsQ0FBRCxDQUFwQyxFQUE2RCxTQUFBO2VBQzNELE1BQUEsQ0FBTyxLQUFBLENBQU0sTUFBTixDQUFQLENBQXFCLENBQUMsT0FBdEIsQ0FBOEIsUUFBOUI7TUFEMkQsQ0FBN0Q7SUFEWSxDQUFkO0VBakJtQixDQUFyQjs7RUFxQkEsUUFBQSxDQUFTLHFCQUFULEVBQWdDLFNBQUE7QUFDOUIsUUFBQTtJQUFBLEtBQUEsR0FBUSxDQUNOLENBQUMsSUFBRCxFQUFPLENBQUMsQ0FBUixDQURNLEVBRU4sQ0FBQyxLQUFELEVBQVEsQ0FBUixDQUZNLEVBR04sQ0FBQyxRQUFELEVBQVcsQ0FBQyxDQUFaLENBSE07V0FNUixLQUFLLENBQUMsT0FBTixDQUFjLFNBQUMsR0FBRDtBQUNaLFVBQUE7TUFEYyxpQkFBUTthQUN0QixFQUFBLENBQUcsMkNBQUgsRUFBZ0QsU0FBQTtlQUM5QyxNQUFBLENBQU8sZ0JBQUEsQ0FBaUIsTUFBakIsRUFBeUIsQ0FBekIsRUFBNEIsR0FBNUIsRUFBaUMsR0FBakMsQ0FBUCxDQUE2QyxDQUFDLE9BQTlDLENBQXNELFFBQXREO01BRDhDLENBQWhEO0lBRFksQ0FBZDtFQVA4QixDQUFoQztBQXZCQSIsInNvdXJjZXNDb250ZW50IjpbIntmaW5kQ2xvc2luZ0luZGV4LCBzcGxpdH0gPSByZXF1aXJlICcuLi9saWIvdXRpbHMnXG5cbmRlc2NyaWJlICcuc3BsaXQoKScsIC0+XG4gIHRlc3RzID0gW1xuICAgIFsnYSxiLGMnLCBbJ2EnLCAnYicsICdjJ11dXG4gICAgWydhLGIoKSxjJywgWydhJywgJ2IoKScsICdjJ11dXG4gICAgWydhLGIoYyknLCBbJ2EnLCAnYihjKSddXVxuICAgIFsnYSwoYiwgYyknLCBbJ2EnLCAnKGIsYyknXV1cbiAgICBbJ2EsKGIsIGMoKSknLCBbJ2EnLCAnKGIsYygpKSddXVxuICAgIFsnYShiLCBjKCkpJywgWydhKGIsYygpKSddXVxuICAgIFsnYSwpKCcsIFsnYSddXVxuICAgIFsnYSgsJywgW11dXG4gICAgWycoLCcsIFtdXVxuICAgIFsnKCwoLCgsKScsIFtdXVxuICAgIFsnYSwoLCcsIFsnYSddXVxuICAgIFsnYSwoKCksJywgWydhJ11dXG4gICAgWydhLCgpKSwnLCBbJ2EnLCAnKCknXV1cbiAgXVxuXG4gIHRlc3RzLmZvckVhY2ggKFtzb3VyY2UsIGV4cGVjdGVkXSkgLT5cbiAgICBpdCBcInNwbGl0cyAje2phc21pbmUucHAgc291cmNlfSBhcyAje2phc21pbmUucHAoZXhwZWN0ZWQpfVwiLCAtPlxuICAgICAgZXhwZWN0KHNwbGl0KHNvdXJjZSkpLnRvRXF1YWwoZXhwZWN0ZWQpXG5cbmRlc2NyaWJlICcuZmluZENsb3NpbmdJbmRleCgpJywgLT5cbiAgdGVzdHMgPSBbXG4gICAgWydhKCcsIC0xXVxuICAgIFsnYSgpJywgMl1cbiAgICBbJ2EoKCgoKScsIC0xXVxuICBdXG5cbiAgdGVzdHMuZm9yRWFjaCAoW3NvdXJjZSwgZXhwZWN0ZWRdKSAtPlxuICAgIGl0IFwicmV0dXJzIHRoZSBpbmRleCBvZiB0aGUgY2xvc2luZyBjaGFyYWN0ZXJcIiwgLT5cbiAgICAgIGV4cGVjdChmaW5kQ2xvc2luZ0luZGV4KHNvdXJjZSwgMiwgJygnLCAnKScpKS50b0VxdWFsKGV4cGVjdGVkKVxuIl19
