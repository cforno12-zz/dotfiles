(function() {
  var Color, Palette;

  require('./helpers/matchers');

  Color = require('../lib/color');

  Palette = require('../lib/palette');

  describe('Palette', function() {
    var colors, createVar, palette, ref;
    ref = [], palette = ref[0], colors = ref[1];
    createVar = function(name, color, path, line) {
      return {
        name: name,
        color: color,
        path: path,
        line: line
      };
    };
    beforeEach(function() {
      colors = [createVar('red', new Color('#ff0000'), 'file.styl', 0), createVar('green', new Color('#00ff00'), 'file.styl', 1), createVar('blue', new Color('#0000ff'), 'file.styl', 2), createVar('redCopy', new Color('#ff0000'), 'file.styl', 3), createVar('red', new Color('#ff0000'), 'file2.styl', 0)];
      return palette = new Palette(colors);
    });
    describe('::getColorsCount', function() {
      return it('returns the number of colors in the palette', function() {
        return expect(palette.getColorsCount()).toEqual(5);
      });
    });
    describe('::getColorsNames', function() {
      return it('returns the names of the colors in the palette', function() {
        return expect(palette.getColorsNames()).toEqual(['red', 'green', 'blue', 'redCopy', 'red']);
      });
    });
    describe('::sortedByName', function() {
      return it('returns the colors and names sorted by name', function() {
        return expect(palette.sortedByName()).toEqual([colors[2], colors[1], colors[0], colors[4], colors[3]]);
      });
    });
    return describe('::sortedByColor', function() {
      return it('returns the colors and names sorted by colors', function() {
        return expect(palette.sortedByColor()).toEqual([colors[0], colors[3], colors[4], colors[1], colors[2]]);
      });
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiL1VzZXJzL0NyaXNGb3Juby8uYXRvbS9wYWNrYWdlcy9waWdtZW50cy9zcGVjL3BhbGV0dGUtc3BlYy5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQSxNQUFBOztFQUFBLE9BQUEsQ0FBUSxvQkFBUjs7RUFFQSxLQUFBLEdBQVEsT0FBQSxDQUFRLGNBQVI7O0VBQ1IsT0FBQSxHQUFVLE9BQUEsQ0FBUSxnQkFBUjs7RUFFVixRQUFBLENBQVMsU0FBVCxFQUFvQixTQUFBO0FBQ2xCLFFBQUE7SUFBQSxNQUFvQixFQUFwQixFQUFDLGdCQUFELEVBQVU7SUFFVixTQUFBLEdBQVksU0FBQyxJQUFELEVBQU8sS0FBUCxFQUFjLElBQWQsRUFBb0IsSUFBcEI7YUFDVjtRQUFDLE1BQUEsSUFBRDtRQUFPLE9BQUEsS0FBUDtRQUFjLE1BQUEsSUFBZDtRQUFvQixNQUFBLElBQXBCOztJQURVO0lBR1osVUFBQSxDQUFXLFNBQUE7TUFDVCxNQUFBLEdBQVMsQ0FDUCxTQUFBLENBQVUsS0FBVixFQUFxQixJQUFBLEtBQUEsQ0FBTSxTQUFOLENBQXJCLEVBQXVDLFdBQXZDLEVBQW9ELENBQXBELENBRE8sRUFFUCxTQUFBLENBQVUsT0FBVixFQUF1QixJQUFBLEtBQUEsQ0FBTSxTQUFOLENBQXZCLEVBQXlDLFdBQXpDLEVBQXNELENBQXRELENBRk8sRUFHUCxTQUFBLENBQVUsTUFBVixFQUFzQixJQUFBLEtBQUEsQ0FBTSxTQUFOLENBQXRCLEVBQXdDLFdBQXhDLEVBQXFELENBQXJELENBSE8sRUFJUCxTQUFBLENBQVUsU0FBVixFQUF5QixJQUFBLEtBQUEsQ0FBTSxTQUFOLENBQXpCLEVBQTJDLFdBQTNDLEVBQXdELENBQXhELENBSk8sRUFLUCxTQUFBLENBQVUsS0FBVixFQUFxQixJQUFBLEtBQUEsQ0FBTSxTQUFOLENBQXJCLEVBQXVDLFlBQXZDLEVBQXFELENBQXJELENBTE87YUFPVCxPQUFBLEdBQWMsSUFBQSxPQUFBLENBQVEsTUFBUjtJQVJMLENBQVg7SUFVQSxRQUFBLENBQVMsa0JBQVQsRUFBNkIsU0FBQTthQUMzQixFQUFBLENBQUcsNkNBQUgsRUFBa0QsU0FBQTtlQUNoRCxNQUFBLENBQU8sT0FBTyxDQUFDLGNBQVIsQ0FBQSxDQUFQLENBQWdDLENBQUMsT0FBakMsQ0FBeUMsQ0FBekM7TUFEZ0QsQ0FBbEQ7SUFEMkIsQ0FBN0I7SUFJQSxRQUFBLENBQVMsa0JBQVQsRUFBNkIsU0FBQTthQUMzQixFQUFBLENBQUcsZ0RBQUgsRUFBcUQsU0FBQTtlQUNuRCxNQUFBLENBQU8sT0FBTyxDQUFDLGNBQVIsQ0FBQSxDQUFQLENBQWdDLENBQUMsT0FBakMsQ0FBeUMsQ0FDdkMsS0FEdUMsRUFFdkMsT0FGdUMsRUFHdkMsTUFIdUMsRUFJdkMsU0FKdUMsRUFLdkMsS0FMdUMsQ0FBekM7TUFEbUQsQ0FBckQ7SUFEMkIsQ0FBN0I7SUFVQSxRQUFBLENBQVMsZ0JBQVQsRUFBMkIsU0FBQTthQUN6QixFQUFBLENBQUcsNkNBQUgsRUFBa0QsU0FBQTtlQUNoRCxNQUFBLENBQU8sT0FBTyxDQUFDLFlBQVIsQ0FBQSxDQUFQLENBQThCLENBQUMsT0FBL0IsQ0FBdUMsQ0FDckMsTUFBTyxDQUFBLENBQUEsQ0FEOEIsRUFFckMsTUFBTyxDQUFBLENBQUEsQ0FGOEIsRUFHckMsTUFBTyxDQUFBLENBQUEsQ0FIOEIsRUFJckMsTUFBTyxDQUFBLENBQUEsQ0FKOEIsRUFLckMsTUFBTyxDQUFBLENBQUEsQ0FMOEIsQ0FBdkM7TUFEZ0QsQ0FBbEQ7SUFEeUIsQ0FBM0I7V0FVQSxRQUFBLENBQVMsaUJBQVQsRUFBNEIsU0FBQTthQUMxQixFQUFBLENBQUcsK0NBQUgsRUFBb0QsU0FBQTtlQUNsRCxNQUFBLENBQU8sT0FBTyxDQUFDLGFBQVIsQ0FBQSxDQUFQLENBQStCLENBQUMsT0FBaEMsQ0FBd0MsQ0FDdEMsTUFBTyxDQUFBLENBQUEsQ0FEK0IsRUFFdEMsTUFBTyxDQUFBLENBQUEsQ0FGK0IsRUFHdEMsTUFBTyxDQUFBLENBQUEsQ0FIK0IsRUFJdEMsTUFBTyxDQUFBLENBQUEsQ0FKK0IsRUFLdEMsTUFBTyxDQUFBLENBQUEsQ0FMK0IsQ0FBeEM7TUFEa0QsQ0FBcEQ7SUFEMEIsQ0FBNUI7RUF4Q2tCLENBQXBCO0FBTEEiLCJzb3VyY2VzQ29udGVudCI6WyJyZXF1aXJlICcuL2hlbHBlcnMvbWF0Y2hlcnMnXG5cbkNvbG9yID0gcmVxdWlyZSAnLi4vbGliL2NvbG9yJ1xuUGFsZXR0ZSA9IHJlcXVpcmUgJy4uL2xpYi9wYWxldHRlJ1xuXG5kZXNjcmliZSAnUGFsZXR0ZScsIC0+XG4gIFtwYWxldHRlLCBjb2xvcnNdID0gW11cblxuICBjcmVhdGVWYXIgPSAobmFtZSwgY29sb3IsIHBhdGgsIGxpbmUpIC0+XG4gICAge25hbWUsIGNvbG9yLCBwYXRoLCBsaW5lfVxuXG4gIGJlZm9yZUVhY2ggLT5cbiAgICBjb2xvcnMgPSBbXG4gICAgICBjcmVhdGVWYXIgJ3JlZCcsIG5ldyBDb2xvcignI2ZmMDAwMCcpLCAnZmlsZS5zdHlsJywgMFxuICAgICAgY3JlYXRlVmFyICdncmVlbicsIG5ldyBDb2xvcignIzAwZmYwMCcpLCAnZmlsZS5zdHlsJywgMVxuICAgICAgY3JlYXRlVmFyICdibHVlJywgbmV3IENvbG9yKCcjMDAwMGZmJyksICdmaWxlLnN0eWwnLCAyXG4gICAgICBjcmVhdGVWYXIgJ3JlZENvcHknLCBuZXcgQ29sb3IoJyNmZjAwMDAnKSwgJ2ZpbGUuc3R5bCcsIDNcbiAgICAgIGNyZWF0ZVZhciAncmVkJywgbmV3IENvbG9yKCcjZmYwMDAwJyksICdmaWxlMi5zdHlsJywgMFxuICAgIF1cbiAgICBwYWxldHRlID0gbmV3IFBhbGV0dGUoY29sb3JzKVxuXG4gIGRlc2NyaWJlICc6OmdldENvbG9yc0NvdW50JywgLT5cbiAgICBpdCAncmV0dXJucyB0aGUgbnVtYmVyIG9mIGNvbG9ycyBpbiB0aGUgcGFsZXR0ZScsIC0+XG4gICAgICBleHBlY3QocGFsZXR0ZS5nZXRDb2xvcnNDb3VudCgpKS50b0VxdWFsKDUpXG5cbiAgZGVzY3JpYmUgJzo6Z2V0Q29sb3JzTmFtZXMnLCAtPlxuICAgIGl0ICdyZXR1cm5zIHRoZSBuYW1lcyBvZiB0aGUgY29sb3JzIGluIHRoZSBwYWxldHRlJywgLT5cbiAgICAgIGV4cGVjdChwYWxldHRlLmdldENvbG9yc05hbWVzKCkpLnRvRXF1YWwoW1xuICAgICAgICAncmVkJ1xuICAgICAgICAnZ3JlZW4nXG4gICAgICAgICdibHVlJ1xuICAgICAgICAncmVkQ29weSdcbiAgICAgICAgJ3JlZCdcbiAgICAgIF0pXG5cbiAgZGVzY3JpYmUgJzo6c29ydGVkQnlOYW1lJywgLT5cbiAgICBpdCAncmV0dXJucyB0aGUgY29sb3JzIGFuZCBuYW1lcyBzb3J0ZWQgYnkgbmFtZScsIC0+XG4gICAgICBleHBlY3QocGFsZXR0ZS5zb3J0ZWRCeU5hbWUoKSkudG9FcXVhbChbXG4gICAgICAgIGNvbG9yc1syXVxuICAgICAgICBjb2xvcnNbMV1cbiAgICAgICAgY29sb3JzWzBdXG4gICAgICAgIGNvbG9yc1s0XVxuICAgICAgICBjb2xvcnNbM11cbiAgICAgIF0pXG5cbiAgZGVzY3JpYmUgJzo6c29ydGVkQnlDb2xvcicsIC0+XG4gICAgaXQgJ3JldHVybnMgdGhlIGNvbG9ycyBhbmQgbmFtZXMgc29ydGVkIGJ5IGNvbG9ycycsIC0+XG4gICAgICBleHBlY3QocGFsZXR0ZS5zb3J0ZWRCeUNvbG9yKCkpLnRvRXF1YWwoW1xuICAgICAgICBjb2xvcnNbMF1cbiAgICAgICAgY29sb3JzWzNdXG4gICAgICAgIGNvbG9yc1s0XVxuICAgICAgICBjb2xvcnNbMV1cbiAgICAgICAgY29sb3JzWzJdXG4gICAgICBdKVxuIl19
